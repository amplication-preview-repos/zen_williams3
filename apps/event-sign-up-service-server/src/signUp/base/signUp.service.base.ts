/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SignUp as PrismaSignUp,
  Event as PrismaEvent,
  Person as PrismaPerson,
} from "@prisma/client";

export class SignUpServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SignUpCountArgs, "select">): Promise<number> {
    return this.prisma.signUp.count(args);
  }

  async signUps(args: Prisma.SignUpFindManyArgs): Promise<PrismaSignUp[]> {
    return this.prisma.signUp.findMany(args);
  }
  async signUp(
    args: Prisma.SignUpFindUniqueArgs
  ): Promise<PrismaSignUp | null> {
    return this.prisma.signUp.findUnique(args);
  }
  async createSignUp(args: Prisma.SignUpCreateArgs): Promise<PrismaSignUp> {
    return this.prisma.signUp.create(args);
  }
  async updateSignUp(args: Prisma.SignUpUpdateArgs): Promise<PrismaSignUp> {
    return this.prisma.signUp.update(args);
  }
  async deleteSignUp(args: Prisma.SignUpDeleteArgs): Promise<PrismaSignUp> {
    return this.prisma.signUp.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.signUp
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }

  async getPerson(parentId: string): Promise<PrismaPerson | null> {
    return this.prisma.signUp
      .findUnique({
        where: { id: parentId },
      })
      .person();
  }
}
