/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SignUp } from "./SignUp";
import { SignUpCountArgs } from "./SignUpCountArgs";
import { SignUpFindManyArgs } from "./SignUpFindManyArgs";
import { SignUpFindUniqueArgs } from "./SignUpFindUniqueArgs";
import { CreateSignUpArgs } from "./CreateSignUpArgs";
import { UpdateSignUpArgs } from "./UpdateSignUpArgs";
import { DeleteSignUpArgs } from "./DeleteSignUpArgs";
import { Event } from "../../event/base/Event";
import { Person } from "../../person/base/Person";
import { SignUpService } from "../signUp.service";
@graphql.Resolver(() => SignUp)
export class SignUpResolverBase {
  constructor(protected readonly service: SignUpService) {}

  async _signUpsMeta(
    @graphql.Args() args: SignUpCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SignUp])
  async signUps(@graphql.Args() args: SignUpFindManyArgs): Promise<SignUp[]> {
    return this.service.signUps(args);
  }

  @graphql.Query(() => SignUp, { nullable: true })
  async signUp(
    @graphql.Args() args: SignUpFindUniqueArgs
  ): Promise<SignUp | null> {
    const result = await this.service.signUp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SignUp)
  async createSignUp(@graphql.Args() args: CreateSignUpArgs): Promise<SignUp> {
    return await this.service.createSignUp({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SignUp)
  async updateSignUp(
    @graphql.Args() args: UpdateSignUpArgs
  ): Promise<SignUp | null> {
    try {
      return await this.service.updateSignUp({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SignUp)
  async deleteSignUp(
    @graphql.Args() args: DeleteSignUpArgs
  ): Promise<SignUp | null> {
    try {
      return await this.service.deleteSignUp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  async getEvent(@graphql.Parent() parent: SignUp): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  async getPerson(@graphql.Parent() parent: SignUp): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
