/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SignUpService } from "../signUp.service";
import { SignUpCreateInput } from "./SignUpCreateInput";
import { SignUp } from "./SignUp";
import { SignUpFindManyArgs } from "./SignUpFindManyArgs";
import { SignUpWhereUniqueInput } from "./SignUpWhereUniqueInput";
import { SignUpUpdateInput } from "./SignUpUpdateInput";

export class SignUpControllerBase {
  constructor(protected readonly service: SignUpService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SignUp })
  async createSignUp(@common.Body() data: SignUpCreateInput): Promise<SignUp> {
    return await this.service.createSignUp({
      data: {
        ...data,

        event: data.event
          ? {
              connect: data.event,
            }
          : undefined,

        person: data.person
          ? {
              connect: data.person,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        event: {
          select: {
            id: true,
          },
        },

        person: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SignUp] })
  @ApiNestedQuery(SignUpFindManyArgs)
  async signUps(@common.Req() request: Request): Promise<SignUp[]> {
    const args = plainToClass(SignUpFindManyArgs, request.query);
    return this.service.signUps({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        event: {
          select: {
            id: true,
          },
        },

        person: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SignUp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async signUp(
    @common.Param() params: SignUpWhereUniqueInput
  ): Promise<SignUp | null> {
    const result = await this.service.signUp({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        event: {
          select: {
            id: true,
          },
        },

        person: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SignUp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSignUp(
    @common.Param() params: SignUpWhereUniqueInput,
    @common.Body() data: SignUpUpdateInput
  ): Promise<SignUp | null> {
    try {
      return await this.service.updateSignUp({
        where: params,
        data: {
          ...data,

          event: data.event
            ? {
                connect: data.event,
              }
            : undefined,

          person: data.person
            ? {
                connect: data.person,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          event: {
            select: {
              id: true,
            },
          },

          person: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SignUp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSignUp(
    @common.Param() params: SignUpWhereUniqueInput
  ): Promise<SignUp | null> {
    try {
      return await this.service.deleteSignUp({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          event: {
            select: {
              id: true,
            },
          },

          person: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
